node {       
    
    try {
        
        stage('Notify and checkout') {
            notifyBuild('STARTED')
            checkout scm 
        }

        stage('Update submodules') {
            sh 'git submodule update --init --recursive'
            
        }

        stage('Run sonar linting') {
            sh 'echo Not Implemented!'
            //def scannerHome = tool 'Local Sonar Scanner';
            //withSonarQubeEnv('Local Sonar') {
            //    sh "${scannerHome}/bin/sonar-scanner -X"
            //}
        }
		
    } catch (e) {
        // Build fails on exception
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

/*
stage("Quality Gate") {
                
    timeout(time: 1, unit: 'HOURS') { 
        def qg = waitForQualityGate() 
        if (qg.status != 'OK') {
            error "Pipeline aborted due to quality gate failure: ${qg.status}"
        }
    }
}
*/

node {
    try {

        def latestBuildTag = env.LATEST_BUILD_TAG
        if (null == latestBuildTag) {
            latestBuildTag = "latest-snap"
        }

        def buildTagPrefix = env.BUILD_TAG_PREFIX
        if (null == buildTagPrefix) {
            buildTagPrefix = "snap-"
        }

        def tagDateFormat = env.TAG_DATE_FORMAT
        if (null == tagDateFormat) {
            tagDateFormat = "yyyyMMddHHmm"
        }

        withCredentials([
			usernamePassword(credentialsId: 'CI_Registry', 
			    passwordVariable: 'DOCKER_PWD', usernameVariable: 'DOCKER_USER')]
        ) {
            stage('Login to registry') {
                sh 'docker login -u ${DOCKER_USER} -p ${DOCKER_PWD} ${REGISTRY_URL}'
            }
        }

        stage('Build images') {
            sh 'BUILD_TAG=' + latestBuildTag + ' REGISTRY_URL=${REGISTRY_URL} docker-compose -f ./deploy/docker-compose.yml build --force-rm'
            
        }

        stage('Push snapshot images to registry') {
            sh 'COMPOSE_HTTP_TIMEOUT=600 BUILD_TAG=' + latestBuildTag + ' REGISTRY_URL=${REGISTRY_URL} docker-compose -f ./deploy/docker-compose.yml push'
        }

        stage('Tag images and push to registry') {
            def dateFormat = new java.text.SimpleDateFormat(tagDateFormat)
            def date = new java.util.Date()
            def tagName = buildTagPrefix + dateFormat.format(date)

            imagesToTag = env.TAG_IMAGES
            //expects a comma-separated list of image names
            //which we will try to tag
            if(0 < imagesToTag.length()) {
                def images = imagesToTag.trim().split("\\s*,\\s*")
                
                images.each {
                    sh 'docker tag ${REGISTRY_URL}/' + it + ':' + latestBuildTag + ' ${REGISTRY_URL}/' + it + ':' + tagName
                    sh 'docker push ${REGISTRY_URL}/' + it + ':' + tagName
                    //echo it
                }
            } 
        }

    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
    
}
def notifyBuild(String buildStatus = 'STARTED') {
    

}